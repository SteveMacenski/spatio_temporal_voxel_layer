#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

combination_method = []
combination_method.append(gen.const("largest", int_t, 0, "uses the highest of the layers in the stack"))
combination_method.append(gen.const("overwrite", int_t, 1, "overrides lower layers than this with these values"))
combination_method_enum = gen.enum(combination_method, "Combination methods")

decay_model = []
decay_model.append(gen.const("Linear", int_t, 0, "Linear"))
decay_model.append(gen.const("Exponential", int_t, 1, "Exponential"))
decay_model.append(gen.const("Permanent", int_t, 2, "Permanent"))
decay_model_enum = gen.enum(decay_model, "Decay models")

gen.add("enabled", bool_t, 0, "Enabled or not", True)
gen.add("publish_voxel_map", bool_t, 1, "Publishes the voxel map", False)
gen.add("voxel_size", double_t, 1, "Size of the voxel in meters", 0.05, 0.001, 10.0)
gen.add("combination_method", int_t, 0, "Combination methods", 1, edit_method=combination_method_enum)
gen.add("mark_threshold", double_t, 0, "Over this threshold, the measurement will be marked", 0.0, 0.0, 200.0)
gen.add("update_footprint_enabled", bool_t, 0, "Cleans where the robot's footprint is", True)
gen.add("track_unknown_space", bool_t, 1, "If true, marks will be UNKNOWN (255) otherwise, FREE (0)", True)
gen.add("decay_model", int_t, 1, "Decay models", 0, edit_method=decay_model_enum)
gen.add("voxel_decay", double_t, 1, "Seconds if linear, e^n if exponential", 10.0, -1, 200.0)
gen.add("mapping_mode", bool_t, 0, "Mapping mode", False)
gen.add("map_save_duration", double_t, 0, "f mapping, how often to save a map for safety", 60.0, 1.0, 2000.0)

exit(gen.generate("spatio_temporal_voxel_layer", "spatio_temporal_voxel_layer", "SpatioTemporalVoxelLayer"))
